{"version":3,"sources":["components/Nav/Nav.jsx","components/Button/Button.jsx","components/Button/Button.container.jsx","components/VotingStats/VotingStats.jsx","components/Register/Register.jsx","components/Register/Register.container.jsx","App.js","serviceWorker.js","index.js"],"names":["Nav","className","to","label","ButtonContainer","VotingStats","registrationLinks","isActive","role","map","entry","index","key","href","url","state","RegisterContainer","useState","setRegistrationLinks","setIsActive","useEffect","a","axios","response","data","feed","gsx$state","$t","gsx$registrationurl","fetch","catch","error","console","App","basename","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"0YAIaA,G,MAAM,kBACjB,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAMC,GAAG,gBAAgBD,UAAU,YAAnC,qBAGA,kBAAC,IAAD,CAAMC,GAAG,YAAYD,UAAU,YAA/B,mB,OCNW,G,MAAA,gBAAGE,EAAH,EAAGA,MAAH,OAAe,gCAASA,KCA1BC,EAAkB,SAAC,GAAa,IAAZD,EAAW,EAAXA,MAC7B,OAAO,kBAAC,EAAD,CAAQA,MAAOA,KCAbE,G,MAAc,WACvB,OACI,yBAAKJ,UAAU,gBACZ,6CACA,gDACA,uEACA,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,YACX,wBAAIA,UAAU,qBAAd,OACA,yFAEJ,yBAAKA,UAAU,YACX,wBAAIA,UAAU,qBAAd,OACA,6EAEJ,yBAAKA,UAAU,YACX,wBAAIA,UAAU,qBAAd,SACA,gFAGR,yBAAKA,UAAU,mBACX,0DACA,4BACI,4HACA,iJACA,qHACA,mFAIZ,kBAAC,EAAD,CAAQE,MAAM,uB,kDChCV,G,MAAA,gBAAGG,EAAH,EAAGA,kBAAmBC,EAAtB,EAAsBA,SAAtB,OACX,yBAAKN,UAAU,YAETM,EACE,yBAAKN,UAAU,oBAAoBO,KAAK,UAAxC,cAEA,yBAAKP,UAAU,gBAEX,4BACKK,EAAkBG,KAAK,SAACC,EAAOC,GAAR,OACpB,wBAAIC,IAAKD,GACL,uBAAGE,KAAMH,EAAMI,KAAMJ,EAAMK,gBCV1CC,EAAoB,WAAO,IAAD,EACiBC,mBAAS,IAD1B,mBAC3BX,EAD2B,KACRY,EADQ,OAEDD,oBAAS,GAFR,mBAE3BV,EAF2B,KAEjBY,EAFiB,KAwBnC,OApBAC,qBAAW,YAGI,uCAAG,4BAAAC,EAAA,6DACVF,GAAY,GADF,SAEaG,IAJP,kHAEN,OAEJC,EAFI,OAGVL,EACIK,EAASC,KAAKC,KAAKf,MAAMD,KAAK,SAACC,GAC3B,MAAO,CACHK,MAAOL,EAAMgB,UAAUC,GACvBb,IAAKJ,EAAMkB,oBAAoBD,QAI3CR,GAAY,GAXF,2CAAH,qDAcXU,GAAQC,OAAO,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,QACxC,IAEK,kBAAC,EAAD,CAAUzB,kBAAmBA,EAAmBC,SAAUA,K,kBCYtD0B,MA9Bf,WACE,OACE,yBAAKhC,UAAU,OACb,gCACE,yBAAKA,UAAU,eACb,oCACA,wCAEF,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAYiC,SAAS,KACnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,gBAAgBC,UAAW/B,IACvC,kBAAC,IAAD,CAAO8B,KAAK,YAAYC,UAAWpB,IACnC,kBAAC,IAAD,CAAOqB,OAAK,EAACF,KAAK,MAClB,kBAAC,IAAD,CAAOE,OAAK,EAACF,KAAK,KAChB,6BACE,uCAKR,gCACE,wDACA,gDCtBYG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdtB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMsB,c","file":"static/js/main.aa5eb0c4.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Nav.css\";\n\nexport const Nav = () => (\n  <div className=\"nav\">\n    <Link to=\"/voting-stats\" className=\"nav-link\">\n      Voting Statistics\n    </Link>\n    <Link to=\"/register\" className=\"nav-link\">\n      Register Now\n    </Link>\n  </div>\n);\n","import React from \"react\";\nimport \"./Button.css\";\n\nexport default ({ label }) => <button>{label}</button>;\n","import React from \"react\";\nimport Button from \"./Button\";\n\nexport const ButtonContainer = ({label}) => {\n    return <Button label={label}/>\n}\n","import React from \"react\";\nimport {ButtonContainer as Button} from \"../Button/Button.container\";\nimport \"./VotingStats.css\";\n\nexport const VotingStats = () => {\n    return (\n        <div className=\"voting-stats\">\n           <h1>DID YOU KNOW?</h1> \n           <h2>Voters age 18-29</h2>\n           <p>*who registered but did not vote in 2016</p>\n           <div className=\"stats-container-outer\">\n               <div className=\"stats-container-inner\">\n                   <div className=\"ind-stat\">\n                       <h3 className=\"percentage-circle\">47%</h3>\n                       <p>Were too busy / had conflicting schedules on election dar</p>\n                   </div>\n                   <div className=\"ind-stat\">\n                       <h3 className=\"percentage-circle\">65%</h3>\n                       <p>Weren't interested in the candidates / issues</p>\n                   </div>\n                   <div className=\"ind-stat\">\n                       <h3 className=\"percentage-circle\">20.5%</h3>\n                       <p>Had problems with voter ID / voter registration</p>\n                   </div>\n               </div>\n               <div className=\"elections-facts\">\n                   <h3>Close Elections in History</h3>\n                   <ul>\n                       <li>1839 - Marcus Morton won the Massachusetts governorship over Edward Everett by a single vote</li>\n                       <li>1884 - Grover Cleveland won New York's Electoral College votes by a margin of 1,149 votes in the popular election</li>\n                       <li>1948 - Lyndon Johnson wins the Texas Democratic primary runoff for Senate by 87 votes</li>\n                       <li>2000 - Al Gore wins New Mexico vote by 366 votes</li>\n                   </ul>\n               </div>\n           </div>\n           <Button label=\"Spread the word\"/>\n        </div>\n    )\n}","import React from \"react\";\nimport \"./Register.css\";\n\nexport default ({ registrationLinks, isActive }) =>\n    <div className=\"register\">\n        {/* when the API call is active, display a loading status */}\n        { isActive ?\n            <div className=\"register-activity\" role=\"status\">Loading...</div>\n        :\n            <div className=\"register-map\">\n                {/* replace this list with a map component */}\n                <ul>\n                    {registrationLinks.map( (entry, index) =>\n                        <li key={index}>\n                            <a href={entry.url}>{entry.state}</a>\n                        </li>\n                    )}\n                </ul>\n            </div>\n        }\n    </div>;","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Register from \"./Register\";\n\nexport const RegisterContainer = () => {\n    const [ registrationLinks, setRegistrationLinks ] = useState([]);\n    const [ isActive, setIsActive ] = useState(false);  // when this is true, display a loading status indicator\n\n    useEffect( () => {\n        const sheetAsJson = \"https://spreadsheets.google.com/feeds/list/1ZQFCw3nzszsidf0kWWXJovEXM-5ChWtkgp2idXrZdjI/1/public/full?alt=json\";\n\n        const fetch = async () => {\n            setIsActive(true);\n            const response = await axios(sheetAsJson);\n            setRegistrationLinks(\n                response.data.feed.entry.map( (entry) => {\n                    return {\n                        state: entry.gsx$state.$t,\n                        url: entry.gsx$registrationurl.$t,\n                    }\n                })\n            );\n            setIsActive(false);\n        }\n\n        fetch().catch( error => console.error(error) );\n    },[]);\n\n    return <Register registrationLinks={registrationLinks} isActive={isActive} />;\n}\n","import React from \"react\";\nimport { Nav } from \"./components/Nav/Nav\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport { VotingStats } from \"./components/VotingStats/VotingStats\";\nimport { RegisterContainer } from \"./components/Register/Register.container\";\nimport { SpreadingAwareness } from \"./components/SpreadingAwareness/SpreadingAwareness\";\nimport { VoterTurnout } from \"./components/VoterTurnout/VoterTurnout\"\nimport { HomeContainer as Home} from \"./components/Home/Home.container\"\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <div className=\"header-left\">\n          <h1>Logo</h1>\n          <p>Be heard</p>\n        </div>\n        <Nav />\n      </header>\n      <HashRouter basename=\"/\">\n        <Switch>\n          <Route path=\"/voting-stats\" component={VotingStats} />\n          <Route path=\"/register\" component={RegisterContainer} />\n          <Route exact path=\"/\" />\n          <Route exact path=\"*\">\n            <div>\n              <h2>404</h2>\n            </div>\n          </Route>\n        </Switch>\n      </HashRouter>\n      <footer>\n        <p>Â© Runtime Terrors 2020</p>\n        <p>Privacy Policy</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}